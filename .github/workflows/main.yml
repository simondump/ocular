name: CI

on: push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  OCULAR_GENESIS_HOST: /api

jobs:
#  build:
#    name: Build app
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: pnpm/action-setup@v2
#        with:
#          version: 8
#
#      - name: Set up Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: 20
#          cache: 'pnpm'
#
#      - name: Install dependencies
#        run: pnpm install
#
#      - name: Lint
#        run: pnpm run lint
#
#      - name: Build
#        run: pnpm run build
#
#      - name: Upload artifact
#        if: success()
#        uses: actions/upload-artifact@v3
#        with:
#          name: app
#          path: dist

  build_docker:
    if: startsWith(github.event.ref, 'refs/tags/v')
    name: Build and publish docker image
#    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            OCULAR_GENESIS_HOST=${{ env.OCULAR_GENESIS_HOST }}
